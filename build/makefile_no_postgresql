##
## Variables
##

PROJ_ENV = local
DOCKER_DIR := docker/local
include $(DOCKER_DIR)/.env
DOCKER_COMPOSE = docker-compose -f $(DOCKER_DIR)/docker-compose.yaml
APP_IMGS := $(shell docker images -q --filter label=custom.project=$(PROJECT_NAME) --format "{{.ID}}")
SONARQUBE_CONF := "docker/${PROJ_ENV}/sonarqube/sonarqube-setup.sh"


##
## General functions
##

## Global configuration
.DELETE_ON_ERROR:

help:
	@echo '																									'
	@echo 'Makefile for generating basic skeleton for Python - Flask app									'
	@echo '																									'
	@echo 'Usage:																							'
	@echo '   make					Print the help															'
	@echo '   make help				Print the help															'
	@echo '   make build				Build the environment from scratch									'
	@echo '   make urls				Print the application URLs												'
	@echo '   make start				Start the application												'
	@echo '   make stop                    	Stop the application											'
	@echo '   make status                  	Display the status of the containers							'
	@echo '   make destroy				Delete the environment												'
	@echo '   make logs				Display logs for the Python container									'
	@echo '   make ssh				Connect to the Python container											'
	@echo '   make requirements			Install packages from the requirements.txt file						'
	@echo '   make sonarqube-analysis		Run Sonarqube analysis      									'
	@echo '   make sonarqube-check			Check the status of the project                   				'
	@echo '																									'


##
## Python/Flask without PostgreSQL functions
##


build:
	@${DOCKER_COMPOSE} build --no-cache

	@$(MAKE) start

	@echo ""
	@sleep 15
	@$(MAKE) sonarqube-setup

	$(MAKE) urls


urls:
	@echo "\nYou might add the following entry in the configuration file /etc/hosts"
	@echo "   127.0.0.1 $(PROJ_DOMAIN)"
	@echo ""
	@echo "The available URLs are:"
	@echo ""
	@echo "   http://localhost:$(PYTHON_EXTERNAL_PORT)"
	@echo "   http://$(PROJ_DOMAIN):$(PYTHON_EXTERNAL_PORT)"

	@echo ""
	@echo "The Sonarqube server is running in the URL:"
	@echo "   http://localhost:$(SONARQUBE_EXTERNAL_PORT)"
	@echo ""


start:
	@${DOCKER_COMPOSE} up -d
	@$(MAKE) urls


stop:
	@${DOCKER_COMPOSE} stop


status:
	@${DOCKER_COMPOSE} ps


destroy:
	@${DOCKER_COMPOSE} down -v -t 20

ifneq ($(strip $(APP_IMGS)),)
	@docker rmi -f $(APP_IMGS) 2>/dev/null
endif


logs:
	@docker logs $(PYTHON_CONTAINER_NAME)


ssh:
	@docker exec -it $(PYTHON_CONTAINER_NAME) bash


requirements:
	@docker exec -it $(PYTHON_CONTAINER_NAME) bash -c "pip install -r requirements.txt"


sonarqube-setup:
	@bash $(SONARQUBE_CONF) 2>/dev/null


sonarqube-analysis:
	@docker run \
		--rm \
		--network $(PROJECT_NAME)_$(DOCKER_NETWORK_NAME) \
		-e SONAR_HOST_URL="http://$(SONARQUBE_HOSTNAME):$(SONARQUBE_INTERNAL_PORT)" \
		-e SONAR_TOKEN="$(SONARQUBE_PROJECT_TOKEN)" \
		-v "$(shell pwd):/usr/src" \
		$(SONARQUBE_RUNNER_BASE_IMAGE)
	@sleep 15
	@$(MAKE) sonarqube-check


sonarqube-check:
	@echo "-----------------------------"
	@echo "-----------------------------"
	@echo -n "The result of the analysis is: "
	@curl -u $(SONARQUBE_PROJECT_TOKEN): \
		-s http://localhost:$(SONARQUBE_EXTERNAL_PORT)/api/qualitygates/project_status?projectKey=$(SONARQUBE_PROJECT_KEY) \
		| jq -r '.projectStatus["status"]'
	@echo "-----------------------------"
	@echo "-----------------------------"


.PHONY: help build urls start stop status destroy logs ssh requirements sonarqube-setup sonarqube-analysis sonarqube-check
